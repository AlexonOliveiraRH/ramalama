#!/bin/bash

available() {
  command -v "$1" > /dev/null
}

select_container_manager() {
  if available podman; then
    echo "podman"
  elif available docker; then
    echo "docker"
  else
    echo "podman"
  fi
}

image_available() {
  [ -n "$("${conman[@]}" images -q "$IMAGE_NAME" 2> /dev/null)" ]
}

check_if_in_hf_db() {
  local host="raw.githubusercontent.com"
  local url="https://$host/ericcurtin/podman-llm/main/hf-db/$IMAGE_NAME"
  local image_data
  if ! image_available && image_data="$(curl -fsSL "$url")"; then
    local hf_repo
    hf_repo="$(echo "$image_data" | sed -ne "s/^hf-repo\s//pg" | xargs)"
    local model
    model="$(echo "$image_data" | sed -ne "s/^model\s//pg" | xargs)"
    local containerfile="FROM quay.io/podman-llm/podman-llm:41
RUN huggingface-cli download $hf_repo $model
RUN ln -s \$(huggingface-cli download $hf_repo $model) /root/$model
LABEL MODEL=/root/$model"
    echo "$containerfile" | "${conman[@]}" build "$vol" -t "$IMAGE_NAME" -
  fi
}

get_model() {
  "${conman[@]}" inspect -f '{{ index .Config.Labels "MODEL"}}' "$IMAGE_NAME"
}

get_dangling_images() {
  "${conman[@]}" images --filter "dangling=true" -q --no-trunc
}

rm_dir(){
  xargs dirname
}

get_model_dir() {
  "${conman_run[@]}" "$IMAGE_NAME" readlink -f "$model" | rm_dir | rm_dir
}

rm_cli() {
  IMAGE_NAME="$1"
  local model
  model="$(get_model)"

  # To be completed, only delete the directory once all associated images, 3b,
  # latest, etc. are removed
  if false; then
    local dir_to_rm
    dir_to_rm=$(get_model_dir)
    "${conman_run[@]}" "$IMAGE_NAME" rm -rf "$dir_to_rm" || true
  fi

  "${conman[@]}" rmi -f "$IMAGE_NAME"
  get_dangling_images | xargs -r "${conman[@]}" rmi -f
}

build_cli() {
  IMAGE_NAME="$1"
  "${conman[@]}" build "$vol" -t "$IMAGE_NAME" .
}

serve_cli() {
  IMAGE_NAME="$1"
  check_if_in_hf_db
  local model
  model="$(get_model)"
  "${conman_run[@]}" -p 8080:8080 "$IMAGE_NAME" llama-server -m "$model"
}

get_llm_store() {
  if [ "$EUID" -eq 0 ]; then
    echo "/var/lib/podman-llm/storage"
    return 0
  fi

  echo "$HOME/.local/share/podman-llm/storage"
}

pull_cli() {
  IMAGE_NAME="$1"
  check_if_in_hf_db
}

run_cli() {
  IMAGE_NAME=$2
  local args=""
  if [ "$#" -gt 2 ] && [ -n "$3" ]; then
    args=("$3")
  else
    check_if_in_hf_db
    local model
    model="$(get_model)"
    args=("llama-main" "-m" "$model" "--log-disable" "--instruct")
  fi

  "${conman_run[@]}" "$IMAGE_NAME" "${args[@]}"
}

main() {
  set -eu -o pipefail

  local conman=("$(select_container_manager)" "--root" "$(get_llm_store)")
  local host_hf="$HOME/.cache/huggingface/"
  mkdir -p "$host_hf"
  local vol="-v$host_hf:/root/.cache/huggingface/"
  local conman_run=("${conman[@]}" "run" "--rm" "-it")
  conman_run+=("--security-opt=label=disable" "-v$HOME:$HOME" "-v/tmp:/tmp")
  conman_run+=("$vol")
  if [ "$1" = "run" ]; then
    run_cli "$@"
  elif [ "$1" = "pull" ]; then
    pull_cli "$2"
  elif [ "$1" = "serve" ]; then
    serve_cli "$2"
  elif [ "$1" = "list" ] || [ "$1" = "ls" ]; then
    "${conman[@]}" images -flabel=MODEL
  elif [ "$1" = "rm" ]; then
    rm_cli "$2"
  elif [ "$1" = "build" ]; then
    build_cli "$2"
  else
    echo "Usage: podman-llm [run|pull|serve|list|rm|build] [image_name]"
    return 1
  fi
}

main "$@"

